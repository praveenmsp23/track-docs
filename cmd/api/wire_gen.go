// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/praveenmsp23/trackdocs/handler/api"
	"github.com/praveenmsp23/trackdocs/handler/health"
	"github.com/praveenmsp23/trackdocs/pkg/cache"
	"github.com/praveenmsp23/trackdocs/pkg/config"
	"github.com/praveenmsp23/trackdocs/pkg/db"
	"github.com/praveenmsp23/trackdocs/pkg/lock"
	"github.com/praveenmsp23/trackdocs/pkg/server"
	"github.com/praveenmsp23/trackdocs/pkg/service"
	"github.com/praveenmsp23/trackdocs/pkg/store"
	"github.com/praveenmsp23/trackdocs/pkg/token"
)

// Injectors from wire.go:

func Initialize(ctx context.Context) (*server.Server, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	manager, err := token.NewManager(configConfig)
	if err != nil {
		return nil, err
	}
	cacheCache, err := cache.NewCache(configConfig)
	if err != nil {
		return nil, err
	}
	redisLock, err := lock.NewRedisLock(cacheCache, configConfig)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewDB(configConfig, redisLock)
	if err != nil {
		return nil, err
	}
	storeStore, err := store.NewStore(gormDB, cacheCache, configConfig)
	if err != nil {
		return nil, err
	}
	healthHealth, err := health.NewHealth(configConfig, storeStore, manager)
	if err != nil {
		return nil, err
	}
	serviceService, err := service.NewService(configConfig, storeStore)
	if err != nil {
		return nil, err
	}
	apiApi, err := api.NewApi(configConfig, storeStore, manager, redisLock, serviceService, cacheCache)
	if err != nil {
		return nil, err
	}
	engine := provideRouter(configConfig, manager, healthHealth, apiApi)
	serverServer, err := server.InitServer(configConfig, engine)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}
